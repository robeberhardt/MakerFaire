package{	import com.freeactionscript.ParallaxField;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.rgs.egg.Invader;	import com.rgs.fonts.FontLibrary;	import com.rgs.rings.Connector;	import com.rgs.rings.Particle;	import com.rgs.rings.Ring;	import com.rgs.rings.RingMaster;	import com.rgs.sprites.MessageSprite;	import com.rgs.sprites.SpriteFactory;	import com.rgs.sprites.SpriteQueue;	import com.rgs.txt.Message;	import com.rgs.txt.MessageLoader;	import com.rgs.utils.KeyboardManager;	import com.rgs.utils.Logger;	import com.rgs.CallToAction;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.text.Font;	import flash.utils.Timer;			import net.hires.debug.Stats;		public class MakerFaire extends MovieClip	{		private var rm					: RingMaster;				private var starHolder			: MovieClip;		private var pfield				: ParallaxField;				private var stats				: Stats;		private var queueTimer				: Timer;		private var hookupTimer				: Timer;				private var currentSprite		: MessageSprite;		private var currentMessage		: Message;		//public var timeMultiplier		: Number = 1.0;				private var pick				: Connector;				private var egg				: Invader;		private var eggTimer		: Timer;				public function MakerFaire()		{			alpha = 0;			TweenPlugin.activate([MotionBlurPlugin, DynamicPropsPlugin]);			Logger.setMode(Logger.LOG_INTERNAL_ONLY);			SpriteQueue.getInstance().emptySignal.add(onEmpty);			addChild(SpriteFactory.getInstance());						MessageLoader.getInstance().loadedSignal.addOnce(init);			//MessageLoader.getInstance().load("long.plist");			MessageLoader.getInstance().load("contents.plist");		}				private function onLoadComplete(xml:XML):void		{			init();		}				private function init():void		{			addChild(KeyboardManager.getInstance());						starHolder = new MovieClip();			addChild(starHolder);			pfield = new ParallaxField();			pfield.createField(starHolder, 10, 10, stage.stageWidth, stage.stageHeight, 100, 3, 1, .05);						egg = new Invader();			addChild(egg);			egg.invasionOverSignal.add(onInvasionOver);			KeyboardManager.getInstance().invaderSignal.add(onInvaderKey);			eggTimer = new Timer(600000);			eggTimer.addEventListener(TimerEvent.TIMER, onEggTimer);			eggTimer.start();						rm = new RingMaster();			rm.scale = 1;			rm.x = Math.round(stage.stageWidth * .5);			rm.y = Math.round(stage.stageHeight * .5);			addChild(rm);			KeyboardManager.getInstance().ringSignal.add(onRingKey);						KeyboardManager.getInstance().killSignal.add(onKillKey);						var cta:MovieClip = new CallToAction();			addChild(cta);			cta.x = Math.round(stage.stageWidth * .5);			cta.y = stage.stageHeight - 30;			//			stats = new Stats();//			addChild(stats);									TweenMax.to(this, 3, { alpha: 1 } );						//hookupTimer = new Timer(6000, 0);			hookupTimer = new Timer(6000, 0);			hookupTimer.addEventListener(TimerEvent.TIMER, hookup);						//queueTimer = new Timer(5000, 0);			queueTimer = new Timer(5000, 0);			queueTimer.addEventListener(TimerEvent.TIMER, mainLoop);						// and away we go!			queueTimer.start();													}				private function onKillKey():void		{			trace("trying to kill random sprite... rm.usedConnectors = " + rm.usedConnectors.length);			if (rm.usedConnectors.length > 0)			{ 				rm.killRandomSprite();			}		}				private function mainLoop(e:TimerEvent):void		{			queueTimer.stop();			SpriteQueue.getInstance().nextSpriteSignal.addOnce(gotNextSprite);			SpriteQueue.getInstance().getNextAvailableSprite();			trace(rm.availableConnectors);			trace("\n\n");			trace(rm.usedConnectors);			trace("\n\n");		}				private function gotNextSprite(theSprite:MessageSprite)		{			theSprite.x = stage.stageWidth * .5;			theSprite.y = stage.stageHeight * .5 + 200;			addChild(theSprite);			theSprite.arrive();			currentSprite = theSprite;			hookupTimer.start();		}				private function onEmpty():void		{			trace("we're empty, starting timer...");			queueTimer.start();		}				private function hookup(e:TimerEvent):void		{			hookupTimer.stop();			trace("hookup - available connectors = " + rm.availableConnectors.length);			if (rm.availableConnectors.length == 0)			{ 				rm.killRandomSprite();			}						var hookupTime:Number = .25;						if (currentSprite.parent != this)			{				var hookupPoint:Point = currentSprite.localToGlobal(new Point(currentSprite.x, currentSprite.y));				var newScale:Number = Ring(currentSprite.parent.parent).realScale;//				trace("newScale: " + newScale + ", from " + currentSprite.parent.parent);//				trace("\n---> newScale: " + newScale);				currentSprite.parent.removeChild(currentSprite);				currentSprite.scale = newScale;				currentSprite.x = hookupPoint.x;				currentSprite.y = hookupPoint.y;				addChild(currentSprite);			}						pick = rm.getRandomConnector();			var targetRing:Ring = rm.getRingByIndex(pick.ring.index);			//var targetPoint:Point = targetRing.predictPosition(pick, hookupTime);						//pick.blink();									/*			TweenMax.to(currentSprite, hookupTime, { dynamicProps: {  x:getTargetPointX, y:getTargetPointY },				scale: targetRing.realScale, alpha: 1 - (targetRing.index * .1),				motionBlur:{strength: 2, quality: 4}, ease:Cubic.easeInOut,				onComplete:attachToTarget, onCompleteParams: [currentSprite, pick]			});			*/						TweenMax.to(currentSprite, hookupTime, { dynamicProps: {  x:getTargetPointX, y:getTargetPointY },				scale: targetRing.scaleX, alpha: .5 + targetRing.index,				motionBlur:{strength: 2, quality: 4}, ease:Cubic.easeInOut,				onComplete:attachToTarget, onCompleteParams: [currentSprite, pick]			});					}				private function getTargetPointX():Number		{			return pick.parent.localToGlobal(new Point(pick.x, pick.y)).x;		}				private function getTargetPointY():Number		{			return pick.parent.localToGlobal(new Point(pick.x, pick.y)).y;		}				private function attachToTarget(what:*, where:Connector):void		{			where.addChild(what);			where.passenger = what;			what.x = what.y = 0;			what.scale = 1;			where.active = true;						queueTimer.start();		}				private function onRingKey():void		{			rm.toggleRings();		}				/*		*   INVADER STUFF		*/				private function onInvaderKey():void		{			trace("INVASION");			eggTimer.stop();			egg.invade();		}				private function onEggTimer(e:TimerEvent):void		{			eggTimer.stop();			egg.invade();		}				private function onInvasionOver():void		{			trace("restarting egg timer");			eggTimer.start();		}					}}